// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/cart/checkout.lomsService -o loms_service_mock.go -n LomsServiceMock -p mock

import (
	"context"
	"route256/cart/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LomsServiceMock implements checkout.lomsService
type LomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userID int64, items []domain.Item) (i1 int, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userID int64, items []domain.Item)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsServiceMockCreateOrder
}

// NewLomsServiceMock returns a mock for checkout.lomsService
func NewLomsServiceMock(t minimock.Tester) *LomsServiceMock {
	m := &LomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLomsServiceMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsServiceMockCreateOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceMockCreateOrder struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockCreateOrderExpectation
	expectations       []*LomsServiceMockCreateOrderExpectation

	callArgs []*LomsServiceMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsServiceMockCreateOrderExpectation specifies expectation struct of the lomsService.CreateOrder
type LomsServiceMockCreateOrderExpectation struct {
	mock      *LomsServiceMock
	params    *LomsServiceMockCreateOrderParams
	paramPtrs *LomsServiceMockCreateOrderParamPtrs
	results   *LomsServiceMockCreateOrderResults
	Counter   uint64
}

// LomsServiceMockCreateOrderParams contains parameters of the lomsService.CreateOrder
type LomsServiceMockCreateOrderParams struct {
	ctx    context.Context
	userID int64
	items  []domain.Item
}

// LomsServiceMockCreateOrderParamPtrs contains pointers to parameters of the lomsService.CreateOrder
type LomsServiceMockCreateOrderParamPtrs struct {
	ctx    *context.Context
	userID *int64
	items  *[]domain.Item
}

// LomsServiceMockCreateOrderResults contains results of the lomsService.CreateOrder
type LomsServiceMockCreateOrderResults struct {
	i1  int
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLomsServiceMockCreateOrder) Optional() *mLomsServiceMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Expect(ctx context.Context, userID int64, items []domain.Item) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LomsServiceMockCreateOrderParams{ctx, userID, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectCtxParam1 sets up expected param ctx for lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectCtxParam1(ctx context.Context) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateOrder
}

// ExpectUserIDParam2 sets up expected param userID for lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectUserIDParam2(userID int64) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.userID = &userID

	return mmCreateOrder
}

// ExpectItemsParam3 sets up expected param items for lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectItemsParam3(items []domain.Item) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.items = &items

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Inspect(f func(ctx context.Context, userID int64, items []domain.Item)) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by lomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Return(i1 int, err error) *LomsServiceMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsServiceMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the lomsService.CreateOrder method
func (mmCreateOrder *mLomsServiceMockCreateOrder) Set(f func(ctx context.Context, userID int64, items []domain.Item) (i1 int, err error)) *LomsServiceMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the lomsService.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the lomsService.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the lomsService.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsServiceMockCreateOrder) When(ctx context.Context, userID int64, items []domain.Item) *LomsServiceMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsServiceMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LomsServiceMockCreateOrderParams{ctx, userID, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up lomsService.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockCreateOrderExpectation) Then(i1 int, err error) *LomsServiceMock {
	e.results = &LomsServiceMockCreateOrderResults{i1, err}
	return e.mock
}

// Times sets number of times lomsService.CreateOrder should be invoked
func (mmCreateOrder *mLomsServiceMockCreateOrder) Times(n uint64) *mLomsServiceMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LomsServiceMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	return mmCreateOrder
}

func (mmCreateOrder *mLomsServiceMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements checkout.lomsService
func (mmCreateOrder *LomsServiceMock) CreateOrder(ctx context.Context, userID int64, items []domain.Item) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userID, items)
	}

	mm_params := LomsServiceMockCreateOrderParams{ctx, userID, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockCreateOrderParams{ctx, userID, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter items, want: %#v, got: %#v%s\n", *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsServiceMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userID, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsServiceMock.CreateOrder. %v %v %v", ctx, userID, items)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsServiceMockCreateOrder) Calls() []*LomsServiceMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsServiceMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder with params: %#v", *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsServiceMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Error("Expected call to LomsServiceMock.CreateOrder")
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.CreateOrder but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), afterCreateOrderCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone()
}
