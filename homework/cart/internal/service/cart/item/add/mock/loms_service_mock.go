// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/cart/item/add.lomsService -o loms_service_mock.go -n LomsServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LomsServiceMock implements add.lomsService
type LomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcInfoStocks          func(ctx context.Context, SKU int64) (i1 int, err error)
	inspectFuncInfoStocks   func(ctx context.Context, SKU int64)
	afterInfoStocksCounter  uint64
	beforeInfoStocksCounter uint64
	InfoStocksMock          mLomsServiceMockInfoStocks
}

// NewLomsServiceMock returns a mock for add.lomsService
func NewLomsServiceMock(t minimock.Tester) *LomsServiceMock {
	m := &LomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InfoStocksMock = mLomsServiceMockInfoStocks{mock: m}
	m.InfoStocksMock.callArgs = []*LomsServiceMockInfoStocksParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceMockInfoStocks struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockInfoStocksExpectation
	expectations       []*LomsServiceMockInfoStocksExpectation

	callArgs []*LomsServiceMockInfoStocksParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LomsServiceMockInfoStocksExpectation specifies expectation struct of the lomsService.InfoStocks
type LomsServiceMockInfoStocksExpectation struct {
	mock      *LomsServiceMock
	params    *LomsServiceMockInfoStocksParams
	paramPtrs *LomsServiceMockInfoStocksParamPtrs
	results   *LomsServiceMockInfoStocksResults
	Counter   uint64
}

// LomsServiceMockInfoStocksParams contains parameters of the lomsService.InfoStocks
type LomsServiceMockInfoStocksParams struct {
	ctx context.Context
	SKU int64
}

// LomsServiceMockInfoStocksParamPtrs contains pointers to parameters of the lomsService.InfoStocks
type LomsServiceMockInfoStocksParamPtrs struct {
	ctx *context.Context
	SKU *int64
}

// LomsServiceMockInfoStocksResults contains results of the lomsService.InfoStocks
type LomsServiceMockInfoStocksResults struct {
	i1  int
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInfoStocks *mLomsServiceMockInfoStocks) Optional() *mLomsServiceMockInfoStocks {
	mmInfoStocks.optional = true
	return mmInfoStocks
}

// Expect sets up expected params for lomsService.InfoStocks
func (mmInfoStocks *mLomsServiceMockInfoStocks) Expect(ctx context.Context, SKU int64) *mLomsServiceMockInfoStocks {
	if mmInfoStocks.mock.funcInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Set")
	}

	if mmInfoStocks.defaultExpectation == nil {
		mmInfoStocks.defaultExpectation = &LomsServiceMockInfoStocksExpectation{}
	}

	if mmInfoStocks.defaultExpectation.paramPtrs != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by ExpectParams functions")
	}

	mmInfoStocks.defaultExpectation.params = &LomsServiceMockInfoStocksParams{ctx, SKU}
	for _, e := range mmInfoStocks.expectations {
		if minimock.Equal(e.params, mmInfoStocks.defaultExpectation.params) {
			mmInfoStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInfoStocks.defaultExpectation.params)
		}
	}

	return mmInfoStocks
}

// ExpectCtxParam1 sets up expected param ctx for lomsService.InfoStocks
func (mmInfoStocks *mLomsServiceMockInfoStocks) ExpectCtxParam1(ctx context.Context) *mLomsServiceMockInfoStocks {
	if mmInfoStocks.mock.funcInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Set")
	}

	if mmInfoStocks.defaultExpectation == nil {
		mmInfoStocks.defaultExpectation = &LomsServiceMockInfoStocksExpectation{}
	}

	if mmInfoStocks.defaultExpectation.params != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Expect")
	}

	if mmInfoStocks.defaultExpectation.paramPtrs == nil {
		mmInfoStocks.defaultExpectation.paramPtrs = &LomsServiceMockInfoStocksParamPtrs{}
	}
	mmInfoStocks.defaultExpectation.paramPtrs.ctx = &ctx

	return mmInfoStocks
}

// ExpectSKUParam2 sets up expected param SKU for lomsService.InfoStocks
func (mmInfoStocks *mLomsServiceMockInfoStocks) ExpectSKUParam2(SKU int64) *mLomsServiceMockInfoStocks {
	if mmInfoStocks.mock.funcInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Set")
	}

	if mmInfoStocks.defaultExpectation == nil {
		mmInfoStocks.defaultExpectation = &LomsServiceMockInfoStocksExpectation{}
	}

	if mmInfoStocks.defaultExpectation.params != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Expect")
	}

	if mmInfoStocks.defaultExpectation.paramPtrs == nil {
		mmInfoStocks.defaultExpectation.paramPtrs = &LomsServiceMockInfoStocksParamPtrs{}
	}
	mmInfoStocks.defaultExpectation.paramPtrs.SKU = &SKU

	return mmInfoStocks
}

// Inspect accepts an inspector function that has same arguments as the lomsService.InfoStocks
func (mmInfoStocks *mLomsServiceMockInfoStocks) Inspect(f func(ctx context.Context, SKU int64)) *mLomsServiceMockInfoStocks {
	if mmInfoStocks.mock.inspectFuncInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.InfoStocks")
	}

	mmInfoStocks.mock.inspectFuncInfoStocks = f

	return mmInfoStocks
}

// Return sets up results that will be returned by lomsService.InfoStocks
func (mmInfoStocks *mLomsServiceMockInfoStocks) Return(i1 int, err error) *LomsServiceMock {
	if mmInfoStocks.mock.funcInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Set")
	}

	if mmInfoStocks.defaultExpectation == nil {
		mmInfoStocks.defaultExpectation = &LomsServiceMockInfoStocksExpectation{mock: mmInfoStocks.mock}
	}
	mmInfoStocks.defaultExpectation.results = &LomsServiceMockInfoStocksResults{i1, err}
	return mmInfoStocks.mock
}

// Set uses given function f to mock the lomsService.InfoStocks method
func (mmInfoStocks *mLomsServiceMockInfoStocks) Set(f func(ctx context.Context, SKU int64) (i1 int, err error)) *LomsServiceMock {
	if mmInfoStocks.defaultExpectation != nil {
		mmInfoStocks.mock.t.Fatalf("Default expectation is already set for the lomsService.InfoStocks method")
	}

	if len(mmInfoStocks.expectations) > 0 {
		mmInfoStocks.mock.t.Fatalf("Some expectations are already set for the lomsService.InfoStocks method")
	}

	mmInfoStocks.mock.funcInfoStocks = f
	return mmInfoStocks.mock
}

// When sets expectation for the lomsService.InfoStocks which will trigger the result defined by the following
// Then helper
func (mmInfoStocks *mLomsServiceMockInfoStocks) When(ctx context.Context, SKU int64) *LomsServiceMockInfoStocksExpectation {
	if mmInfoStocks.mock.funcInfoStocks != nil {
		mmInfoStocks.mock.t.Fatalf("LomsServiceMock.InfoStocks mock is already set by Set")
	}

	expectation := &LomsServiceMockInfoStocksExpectation{
		mock:   mmInfoStocks.mock,
		params: &LomsServiceMockInfoStocksParams{ctx, SKU},
	}
	mmInfoStocks.expectations = append(mmInfoStocks.expectations, expectation)
	return expectation
}

// Then sets up lomsService.InfoStocks return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockInfoStocksExpectation) Then(i1 int, err error) *LomsServiceMock {
	e.results = &LomsServiceMockInfoStocksResults{i1, err}
	return e.mock
}

// Times sets number of times lomsService.InfoStocks should be invoked
func (mmInfoStocks *mLomsServiceMockInfoStocks) Times(n uint64) *mLomsServiceMockInfoStocks {
	if n == 0 {
		mmInfoStocks.mock.t.Fatalf("Times of LomsServiceMock.InfoStocks mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInfoStocks.expectedInvocations, n)
	return mmInfoStocks
}

func (mmInfoStocks *mLomsServiceMockInfoStocks) invocationsDone() bool {
	if len(mmInfoStocks.expectations) == 0 && mmInfoStocks.defaultExpectation == nil && mmInfoStocks.mock.funcInfoStocks == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInfoStocks.mock.afterInfoStocksCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInfoStocks.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// InfoStocks implements add.lomsService
func (mmInfoStocks *LomsServiceMock) InfoStocks(ctx context.Context, SKU int64) (i1 int, err error) {
	mm_atomic.AddUint64(&mmInfoStocks.beforeInfoStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmInfoStocks.afterInfoStocksCounter, 1)

	if mmInfoStocks.inspectFuncInfoStocks != nil {
		mmInfoStocks.inspectFuncInfoStocks(ctx, SKU)
	}

	mm_params := LomsServiceMockInfoStocksParams{ctx, SKU}

	// Record call args
	mmInfoStocks.InfoStocksMock.mutex.Lock()
	mmInfoStocks.InfoStocksMock.callArgs = append(mmInfoStocks.InfoStocksMock.callArgs, &mm_params)
	mmInfoStocks.InfoStocksMock.mutex.Unlock()

	for _, e := range mmInfoStocks.InfoStocksMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmInfoStocks.InfoStocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInfoStocks.InfoStocksMock.defaultExpectation.Counter, 1)
		mm_want := mmInfoStocks.InfoStocksMock.defaultExpectation.params
		mm_want_ptrs := mmInfoStocks.InfoStocksMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockInfoStocksParams{ctx, SKU}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInfoStocks.t.Errorf("LomsServiceMock.InfoStocks got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.SKU != nil && !minimock.Equal(*mm_want_ptrs.SKU, mm_got.SKU) {
				mmInfoStocks.t.Errorf("LomsServiceMock.InfoStocks got unexpected parameter SKU, want: %#v, got: %#v%s\n", *mm_want_ptrs.SKU, mm_got.SKU, minimock.Diff(*mm_want_ptrs.SKU, mm_got.SKU))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInfoStocks.t.Errorf("LomsServiceMock.InfoStocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInfoStocks.InfoStocksMock.defaultExpectation.results
		if mm_results == nil {
			mmInfoStocks.t.Fatal("No results are set for the LomsServiceMock.InfoStocks")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmInfoStocks.funcInfoStocks != nil {
		return mmInfoStocks.funcInfoStocks(ctx, SKU)
	}
	mmInfoStocks.t.Fatalf("Unexpected call to LomsServiceMock.InfoStocks. %v %v", ctx, SKU)
	return
}

// InfoStocksAfterCounter returns a count of finished LomsServiceMock.InfoStocks invocations
func (mmInfoStocks *LomsServiceMock) InfoStocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfoStocks.afterInfoStocksCounter)
}

// InfoStocksBeforeCounter returns a count of LomsServiceMock.InfoStocks invocations
func (mmInfoStocks *LomsServiceMock) InfoStocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfoStocks.beforeInfoStocksCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.InfoStocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInfoStocks *mLomsServiceMockInfoStocks) Calls() []*LomsServiceMockInfoStocksParams {
	mmInfoStocks.mutex.RLock()

	argCopy := make([]*LomsServiceMockInfoStocksParams, len(mmInfoStocks.callArgs))
	copy(argCopy, mmInfoStocks.callArgs)

	mmInfoStocks.mutex.RUnlock()

	return argCopy
}

// MinimockInfoStocksDone returns true if the count of the InfoStocks invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockInfoStocksDone() bool {
	if m.InfoStocksMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InfoStocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InfoStocksMock.invocationsDone()
}

// MinimockInfoStocksInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockInfoStocksInspect() {
	for _, e := range m.InfoStocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.InfoStocks with params: %#v", *e.params)
		}
	}

	afterInfoStocksCounter := mm_atomic.LoadUint64(&m.afterInfoStocksCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InfoStocksMock.defaultExpectation != nil && afterInfoStocksCounter < 1 {
		if m.InfoStocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsServiceMock.InfoStocks")
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.InfoStocks with params: %#v", *m.InfoStocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfoStocks != nil && afterInfoStocksCounter < 1 {
		m.t.Error("Expected call to LomsServiceMock.InfoStocks")
	}

	if !m.InfoStocksMock.invocationsDone() && afterInfoStocksCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.InfoStocks but found %d calls",
			mm_atomic.LoadUint64(&m.InfoStocksMock.expectedInvocations), afterInfoStocksCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockInfoStocksInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInfoStocksDone()
}
