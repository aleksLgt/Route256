// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/cart/item/delete.repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements delete.repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeleteOne          func(ctx context.Context, userID int64, skuID int64)
	inspectFuncDeleteOne   func(ctx context.Context, userID int64, skuID int64)
	afterDeleteOneCounter  uint64
	beforeDeleteOneCounter uint64
	DeleteOneMock          mRepositoryMockDeleteOne
}

// NewRepositoryMock returns a mock for delete.repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteOneMock = mRepositoryMockDeleteOne{mock: m}
	m.DeleteOneMock.callArgs = []*RepositoryMockDeleteOneParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockDeleteOne struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockDeleteOneExpectation
	expectations       []*RepositoryMockDeleteOneExpectation

	callArgs []*RepositoryMockDeleteOneParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockDeleteOneExpectation specifies expectation struct of the repository.DeleteOne
type RepositoryMockDeleteOneExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockDeleteOneParams
	paramPtrs *RepositoryMockDeleteOneParamPtrs

	Counter uint64
}

// RepositoryMockDeleteOneParams contains parameters of the repository.DeleteOne
type RepositoryMockDeleteOneParams struct {
	ctx    context.Context
	userID int64
	skuID  int64
}

// RepositoryMockDeleteOneParamPtrs contains pointers to parameters of the repository.DeleteOne
type RepositoryMockDeleteOneParamPtrs struct {
	ctx    *context.Context
	userID *int64
	skuID  *int64
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteOne *mRepositoryMockDeleteOne) Optional() *mRepositoryMockDeleteOne {
	mmDeleteOne.optional = true
	return mmDeleteOne
}

// Expect sets up expected params for repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) Expect(ctx context.Context, userID int64, skuID int64) *mRepositoryMockDeleteOne {
	if mmDeleteOne.mock.funcDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Set")
	}

	if mmDeleteOne.defaultExpectation == nil {
		mmDeleteOne.defaultExpectation = &RepositoryMockDeleteOneExpectation{}
	}

	if mmDeleteOne.defaultExpectation.paramPtrs != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by ExpectParams functions")
	}

	mmDeleteOne.defaultExpectation.params = &RepositoryMockDeleteOneParams{ctx, userID, skuID}
	for _, e := range mmDeleteOne.expectations {
		if minimock.Equal(e.params, mmDeleteOne.defaultExpectation.params) {
			mmDeleteOne.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteOne.defaultExpectation.params)
		}
	}

	return mmDeleteOne
}

// ExpectCtxParam1 sets up expected param ctx for repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) ExpectCtxParam1(ctx context.Context) *mRepositoryMockDeleteOne {
	if mmDeleteOne.mock.funcDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Set")
	}

	if mmDeleteOne.defaultExpectation == nil {
		mmDeleteOne.defaultExpectation = &RepositoryMockDeleteOneExpectation{}
	}

	if mmDeleteOne.defaultExpectation.params != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Expect")
	}

	if mmDeleteOne.defaultExpectation.paramPtrs == nil {
		mmDeleteOne.defaultExpectation.paramPtrs = &RepositoryMockDeleteOneParamPtrs{}
	}
	mmDeleteOne.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteOne
}

// ExpectUserIDParam2 sets up expected param userID for repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) ExpectUserIDParam2(userID int64) *mRepositoryMockDeleteOne {
	if mmDeleteOne.mock.funcDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Set")
	}

	if mmDeleteOne.defaultExpectation == nil {
		mmDeleteOne.defaultExpectation = &RepositoryMockDeleteOneExpectation{}
	}

	if mmDeleteOne.defaultExpectation.params != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Expect")
	}

	if mmDeleteOne.defaultExpectation.paramPtrs == nil {
		mmDeleteOne.defaultExpectation.paramPtrs = &RepositoryMockDeleteOneParamPtrs{}
	}
	mmDeleteOne.defaultExpectation.paramPtrs.userID = &userID

	return mmDeleteOne
}

// ExpectSkuIDParam3 sets up expected param skuID for repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) ExpectSkuIDParam3(skuID int64) *mRepositoryMockDeleteOne {
	if mmDeleteOne.mock.funcDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Set")
	}

	if mmDeleteOne.defaultExpectation == nil {
		mmDeleteOne.defaultExpectation = &RepositoryMockDeleteOneExpectation{}
	}

	if mmDeleteOne.defaultExpectation.params != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Expect")
	}

	if mmDeleteOne.defaultExpectation.paramPtrs == nil {
		mmDeleteOne.defaultExpectation.paramPtrs = &RepositoryMockDeleteOneParamPtrs{}
	}
	mmDeleteOne.defaultExpectation.paramPtrs.skuID = &skuID

	return mmDeleteOne
}

// Inspect accepts an inspector function that has same arguments as the repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) Inspect(f func(ctx context.Context, userID int64, skuID int64)) *mRepositoryMockDeleteOne {
	if mmDeleteOne.mock.inspectFuncDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("Inspect function is already set for RepositoryMock.DeleteOne")
	}

	mmDeleteOne.mock.inspectFuncDeleteOne = f

	return mmDeleteOne
}

// Return sets up results that will be returned by repository.DeleteOne
func (mmDeleteOne *mRepositoryMockDeleteOne) Return() *RepositoryMock {
	if mmDeleteOne.mock.funcDeleteOne != nil {
		mmDeleteOne.mock.t.Fatalf("RepositoryMock.DeleteOne mock is already set by Set")
	}

	if mmDeleteOne.defaultExpectation == nil {
		mmDeleteOne.defaultExpectation = &RepositoryMockDeleteOneExpectation{mock: mmDeleteOne.mock}
	}

	return mmDeleteOne.mock
}

// Set uses given function f to mock the repository.DeleteOne method
func (mmDeleteOne *mRepositoryMockDeleteOne) Set(f func(ctx context.Context, userID int64, skuID int64)) *RepositoryMock {
	if mmDeleteOne.defaultExpectation != nil {
		mmDeleteOne.mock.t.Fatalf("Default expectation is already set for the repository.DeleteOne method")
	}

	if len(mmDeleteOne.expectations) > 0 {
		mmDeleteOne.mock.t.Fatalf("Some expectations are already set for the repository.DeleteOne method")
	}

	mmDeleteOne.mock.funcDeleteOne = f
	return mmDeleteOne.mock
}

// Times sets number of times repository.DeleteOne should be invoked
func (mmDeleteOne *mRepositoryMockDeleteOne) Times(n uint64) *mRepositoryMockDeleteOne {
	if n == 0 {
		mmDeleteOne.mock.t.Fatalf("Times of RepositoryMock.DeleteOne mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteOne.expectedInvocations, n)
	return mmDeleteOne
}

func (mmDeleteOne *mRepositoryMockDeleteOne) invocationsDone() bool {
	if len(mmDeleteOne.expectations) == 0 && mmDeleteOne.defaultExpectation == nil && mmDeleteOne.mock.funcDeleteOne == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteOne.mock.afterDeleteOneCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteOne.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteOne implements delete.repository
func (mmDeleteOne *RepositoryMock) DeleteOne(ctx context.Context, userID int64, skuID int64) {
	mm_atomic.AddUint64(&mmDeleteOne.beforeDeleteOneCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteOne.afterDeleteOneCounter, 1)

	if mmDeleteOne.inspectFuncDeleteOne != nil {
		mmDeleteOne.inspectFuncDeleteOne(ctx, userID, skuID)
	}

	mm_params := RepositoryMockDeleteOneParams{ctx, userID, skuID}

	// Record call args
	mmDeleteOne.DeleteOneMock.mutex.Lock()
	mmDeleteOne.DeleteOneMock.callArgs = append(mmDeleteOne.DeleteOneMock.callArgs, &mm_params)
	mmDeleteOne.DeleteOneMock.mutex.Unlock()

	for _, e := range mmDeleteOne.DeleteOneMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDeleteOne.DeleteOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteOne.DeleteOneMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteOne.DeleteOneMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteOne.DeleteOneMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockDeleteOneParams{ctx, userID, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteOne.t.Errorf("RepositoryMock.DeleteOne got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmDeleteOne.t.Errorf("RepositoryMock.DeleteOne got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmDeleteOne.t.Errorf("RepositoryMock.DeleteOne got unexpected parameter skuID, want: %#v, got: %#v%s\n", *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteOne.t.Errorf("RepositoryMock.DeleteOne got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDeleteOne.funcDeleteOne != nil {
		mmDeleteOne.funcDeleteOne(ctx, userID, skuID)
		return
	}
	mmDeleteOne.t.Fatalf("Unexpected call to RepositoryMock.DeleteOne. %v %v %v", ctx, userID, skuID)

}

// DeleteOneAfterCounter returns a count of finished RepositoryMock.DeleteOne invocations
func (mmDeleteOne *RepositoryMock) DeleteOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteOne.afterDeleteOneCounter)
}

// DeleteOneBeforeCounter returns a count of RepositoryMock.DeleteOne invocations
func (mmDeleteOne *RepositoryMock) DeleteOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteOne.beforeDeleteOneCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.DeleteOne.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteOne *mRepositoryMockDeleteOne) Calls() []*RepositoryMockDeleteOneParams {
	mmDeleteOne.mutex.RLock()

	argCopy := make([]*RepositoryMockDeleteOneParams, len(mmDeleteOne.callArgs))
	copy(argCopy, mmDeleteOne.callArgs)

	mmDeleteOne.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteOneDone returns true if the count of the DeleteOne invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockDeleteOneDone() bool {
	if m.DeleteOneMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteOneMock.invocationsDone()
}

// MinimockDeleteOneInspect logs each unmet expectation
func (m *RepositoryMock) MinimockDeleteOneInspect() {
	for _, e := range m.DeleteOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.DeleteOne with params: %#v", *e.params)
		}
	}

	afterDeleteOneCounter := mm_atomic.LoadUint64(&m.afterDeleteOneCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteOneMock.defaultExpectation != nil && afterDeleteOneCounter < 1 {
		if m.DeleteOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.DeleteOne")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.DeleteOne with params: %#v", *m.DeleteOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteOne != nil && afterDeleteOneCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.DeleteOne")
	}

	if !m.DeleteOneMock.invocationsDone() && afterDeleteOneCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.DeleteOne but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteOneMock.expectedInvocations), afterDeleteOneCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteOneInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteOneDone()
}
