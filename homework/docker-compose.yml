version: "3.8"

networks:
  internal:
    driver: bridge

services:
  cart:
    container_name: cart
    image: cart
    build:
      context: ./cart
      dockerfile: ./build/Dockerfile
    ports:
      - "8082:8082" # HTTP
    networks:
      - internal
    depends_on:
      - loms

  loms:
    container_name: loms
    image: loms
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
      args:
        - DB_CONN_READ=${DB_CONN_READ}
        - DB_CONN_WRITE=${DB_CONN_WRITE}
        - DB_CONN_TEST=${DB_CONN_TEST}
        - GRPC_PORT=${GRPC_PORT}
        - HTTP_PORT=${HTTP_PORT}
        - JAEGER_HOST=${JAEGER_HOST}
    ports:
      - "8081:8081" # HTTP
      - "50051:50051" # gRPC
    networks:
      - internal
    depends_on:
      pg-0:
        condition: service_healthy
      pg-1:
        condition: service_healthy
      kafka0:
        condition: service_healthy

  pg-0:
    image: docker.io/bitnami/postgresql-repmgr:16
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - pg_0_data:/bitnami/postgresql
    networks:
      - internal
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRESQL_POSTGRES_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-0,pg-1:5432
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_PORT_NUMBER=5432
    healthcheck:
      test: pg_isready --username ${POSTGRESQL_USERNAME} --dbname ${POSTGRESQL_DATABASE}
      interval: 5s
      retries: 10
      timeout: 60s

  pg-1:
    image: docker.io/bitnami/postgresql-repmgr:16
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - pg_1_data:/bitnami/postgresql
    networks:
      - internal
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRESQL_POSTGRES_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-0,pg-1:5432
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_PORT_NUMBER=5432
    healthcheck:
      test: pg_isready --username ${POSTGRESQL_USERNAME} --dbname ${POSTGRESQL_DATABASE}
      interval: 5s
      retries: 10
      timeout: 60s

  testdb:
    image: postgres
    restart: always
    networks:
      - internal
    ports:
      - "5435:5435"
    environment:
      - POSTGRES_DB=${POSTGRESQL_DATABASE}
      - POSTGRES_USER=${POSTGRESQL_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    healthcheck:
      test: pg_isready --username ${POSTGRESQL_USERNAME} --dbname ${POSTGRESQL_DATABASE}
      interval: 5s
      retries: 10
      timeout: 60s

  prometheus:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    networks:
      - internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  grafana:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - internal
    ports:
      - "3000:3000"

  jaeger:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/jaegertracing:latest
    networks:
      - internal
    ports:
      - "16686:16686"
      - "4318:4318"

  kafka-ui:
    container_name: route256-kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - internal
    ports:
      - "8084:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka0:
    container_name: route256-kafka
    image: confluentinc/cp-kafka:7.5.4.arm64
    networks:
      - internal
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka0:29092", "|", "grep", "loms.order-events" ]
      interval: 10s
      retries: 15
      timeout: 120s

  kafka-init-topics:
    container_name: route256-init-topics
    image: confluentinc/cp-kafka:7.5.4.arm64
    networks:
      - internal
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 90 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

  notifier-1:
    container_name: notifier-1
    image: notifier-image
    networks:
      - internal
    build:
      context: ./notifier
      dockerfile: ./build/Dockerfile
    depends_on:
      kafka0:
        condition: service_healthy

  notifier-2:
    container_name: notifier-2
    image: notifier-image
    networks:
      - internal
    depends_on:
      - notifier-1

  notifier-3:
    container_name: notifier-3
    image: notifier-image
    networks:
      - internal
    depends_on:
      - notifier-1

volumes:
  pg_0_data:
    driver: local
  pg_1_data:
    driver: local
  prometheus_data: {}
  grafana_data: {}
  kafka_data:
    driver: local
