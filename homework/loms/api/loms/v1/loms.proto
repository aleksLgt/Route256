syntax = "proto3";

package route256.loms.pkg.loms.pkg.loms.v1;

option go_package = "route256/loms/pkg/api/loms/v1;loms";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// See more: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/proto/examplepb/a_bit_of_everything.proto
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "LOMS Service";
        version: "1.0.0";
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "x-auth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "x-auth";
            }
        }
    }
};

service LOMS {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description: "LOMS service"
        external_docs: {
            url: "https://gitlab.ozon.dev/alekslgt/homework/-/tree/master/loms";
            description: "LOMS service";
        }
    };

    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/order/create"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "x-auth";
                    value: {}
                }
            }
        };
    }

    rpc InfoOrder(InfoOrderRequest) returns (InfoOrderResponse) {
        option (google.api.http) = {
            get: "/v1/order/{order_id}/info"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "x-auth";
                    value: {}
                }
            }
        };
    }

    rpc PayOrder(PayOrderRequest) returns (PayOrderResponse) {
        option (google.api.http) = {
            post: "/v1/order/{order_id}/pay"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "x-auth";
                    value: {}
                }
            }
        };
    }

    rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
        option (google.api.http) = {
            post: "/v1/order/{order_id}/cancel"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "x-auth";
                    value: {}
                }
            }
        };
    }

    rpc InfoStocks(InfoStocksRequest) returns (InfoStocksResponse) {
        option (google.api.http) = {
            get: "/v1/stock/{sku}/info"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "x-auth";
                    value: {}
                }
            }
        };
    }
}

message Item {
    uint32 sku = 1 [(validate.rules).uint32.gte = 1];
    uint32 count = 2 [(validate.rules).uint32.gte = 1];
}

message CreateOrderRequest {
    int64 user = 1 [(validate.rules).int64.gte = 1];
    repeated Item items = 2;
}

message InfoOrderRequest {
    int64 order_id = 1 [(validate.rules).int64.gte = 1];
}

message PayOrderRequest {
    int64 order_id = 1 [(validate.rules).int64.gte = 1];
}

message CancelOrderRequest {
    int64 order_id = 1 [(validate.rules).int64.gte = 1];
}

message InfoStocksRequest {
    uint32 sku = 1 [(validate.rules).uint32.gte = 1];
}

message CreateOrderResponse {
    uint64 orderID = 1;
}

message InfoOrderResponse {
    string status = 1;
    int64 user = 2;
    repeated Item items = 3;
}

message PayOrderResponse {
    bool success = 1;
}

message CancelOrderResponse {
    bool success = 1;
}

message InfoStocksResponse {
    int64 count = 1;
}
