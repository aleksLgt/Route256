// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package orders

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(user_id, status)
VALUES ($1, $2)
RETURNING id
`

type CreateOrderParams struct {
	UserID int64
	Status string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Status)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items(order_id, sku, count)
VALUES ($1, $2, $3)
`

type CreateOrderItemParams struct {
	OrderID int64
	Sku     int32
	Count   int32
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.db.Exec(ctx, createOrderItem, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const createOutboxOrderEvent = `-- name: CreateOutboxOrderEvent :exec
INSERT INTO outbox_order_events(order_id, event_type)
VALUES ($1, $2)
`

type CreateOutboxOrderEventParams struct {
	OrderID   int64
	EventType string
}

func (q *Queries) CreateOutboxOrderEvent(ctx context.Context, arg CreateOutboxOrderEventParams) error {
	_, err := q.db.Exec(ctx, createOutboxOrderEvent, arg.OrderID, arg.EventType)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, status FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.Status)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, sku, count FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnsentOutboxOrderEvents = `-- name: GetUnsentOutboxOrderEvents :many
SELECT id, order_id, event_type, was_sent, created_at FROM outbox_order_events
WHERE was_sent = false
LIMIT $1
`

func (q *Queries) GetUnsentOutboxOrderEvents(ctx context.Context, limit int32) ([]OutboxOrderEvent, error) {
	rows, err := q.db.Query(ctx, getUnsentOutboxOrderEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutboxOrderEvent
	for rows.Next() {
		var i OutboxOrderEvent
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.EventType,
			&i.WasSent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsSentOutboxOrderEvent = `-- name: MarkAsSentOutboxOrderEvent :exec
UPDATE outbox_order_events
SET was_sent = true
WHERE id = $1
`

func (q *Queries) MarkAsSentOutboxOrderEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markAsSentOutboxOrderEvent, id)
	return err
}

const setOrderStatus = `-- name: SetOrderStatus :exec
UPDATE orders
SET status = $1
WHERE id = $2
`

type SetOrderStatusParams struct {
	Status string
	ID     int32
}

func (q *Queries) SetOrderStatus(ctx context.Context, arg SetOrderStatusParams) error {
	_, err := q.db.Exec(ctx, setOrderStatus, arg.Status, arg.ID)
	return err
}
