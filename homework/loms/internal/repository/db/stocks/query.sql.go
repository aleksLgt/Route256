// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package stocks

import (
	"context"
)

const cancelReserveStocks = `-- name: CancelReserveStocks :exec
UPDATE stocks
SET reserved = $1
WHERE sku = any ($2)
`

type CancelReserveStocksParams struct {
	Reserved int32
	Skus     []int32
}

func (q *Queries) CancelReserveStocks(ctx context.Context, arg CancelReserveStocksParams) error {
	_, err := q.db.Exec(ctx, cancelReserveStocks, arg.Reserved, arg.Skus)
	return err
}

const createStock = `-- name: CreateStock :exec
INSERT INTO stocks (sku, total_count, reserved)
SELECT $1, $2, $3
WHERE NOT EXISTS (SELECT 1 FROM stocks WHERE sku = $1)
`

type CreateStockParams struct {
	Sku        int32
	TotalCount int32
	Reserved   int32
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) error {
	_, err := q.db.Exec(ctx, createStock, arg.Sku, arg.TotalCount, arg.Reserved)
	return err
}

const getStock = `-- name: GetStock :one
SELECT id, sku, total_count, reserved FROM stocks
WHERE sku = $1
LIMIT 1
`

func (q *Queries) GetStock(ctx context.Context, sku int32) (Stock, error) {
	row := q.db.QueryRow(ctx, getStock, sku)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.TotalCount,
		&i.Reserved,
	)
	return i, err
}

const getStocks = `-- name: GetStocks :many
SELECT id, sku, total_count, reserved FROM stocks
WHERE id = any ($1)
`

func (q *Queries) GetStocks(ctx context.Context, ids []int32) ([]Stock, error) {
	rows, err := q.db.Query(ctx, getStocks, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.TotalCount,
			&i.Reserved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReserveStock = `-- name: RemoveReserveStock :exec
UPDATE stocks
SET reserved = $1 AND total_count = $2
WHERE id = $3
`

type RemoveReserveStockParams struct {
	Reserved   int32
	TotalCount int32
	ID         int32
}

func (q *Queries) RemoveReserveStock(ctx context.Context, arg RemoveReserveStockParams) error {
	_, err := q.db.Exec(ctx, removeReserveStock, arg.Reserved, arg.TotalCount, arg.ID)
	return err
}

const reserveStock = `-- name: ReserveStock :exec
UPDATE stocks
SET reserved = $1
WHERE sku = $2
`

type ReserveStockParams struct {
	Reserved int32
	Sku      int32
}

func (q *Queries) ReserveStock(ctx context.Context, arg ReserveStockParams) error {
	_, err := q.db.Exec(ctx, reserveStock, arg.Reserved, arg.Sku)
	return err
}
