// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loms.proto

package loms

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() < 1 {
		err := ItemValidationError{
			field:  "Sku",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCount() < 1 {
		err := ItemValidationError{
			field:  "Count",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() < 1 {
		err := CreateOrderRequestValidationError{
			field:  "User",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrderRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrderRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrderRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on InfoOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InfoOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoOrderRequestMultiError, or nil if none found.
func (m *InfoOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() < 1 {
		err := InfoOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InfoOrderRequestMultiError(errors)
	}

	return nil
}

// InfoOrderRequestMultiError is an error wrapping multiple validation errors
// returned by InfoOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type InfoOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoOrderRequestMultiError) AllErrors() []error { return m }

// InfoOrderRequestValidationError is the validation error returned by
// InfoOrderRequest.Validate if the designated constraints aren't met.
type InfoOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoOrderRequestValidationError) ErrorName() string { return "InfoOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e InfoOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoOrderRequestValidationError{}

// Validate checks the field values on PayOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PayOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PayOrderRequestMultiError, or nil if none found.
func (m *PayOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() < 1 {
		err := PayOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PayOrderRequestMultiError(errors)
	}

	return nil
}

// PayOrderRequestMultiError is an error wrapping multiple validation errors
// returned by PayOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type PayOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOrderRequestMultiError) AllErrors() []error { return m }

// PayOrderRequestValidationError is the validation error returned by
// PayOrderRequest.Validate if the designated constraints aren't met.
type PayOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOrderRequestValidationError) ErrorName() string { return "PayOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e PayOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOrderRequestValidationError{}

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelOrderRequestMultiError, or nil if none found.
func (m *CancelOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() < 1 {
		err := CancelOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelOrderRequestMultiError(errors)
	}

	return nil
}

// CancelOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CancelOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderRequestMultiError) AllErrors() []error { return m }

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

// Validate checks the field values on InfoStocksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InfoStocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoStocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoStocksRequestMultiError, or nil if none found.
func (m *InfoStocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoStocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() < 1 {
		err := InfoStocksRequestValidationError{
			field:  "Sku",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InfoStocksRequestMultiError(errors)
	}

	return nil
}

// InfoStocksRequestMultiError is an error wrapping multiple validation errors
// returned by InfoStocksRequest.ValidateAll() if the designated constraints
// aren't met.
type InfoStocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoStocksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoStocksRequestMultiError) AllErrors() []error { return m }

// InfoStocksRequestValidationError is the validation error returned by
// InfoStocksRequest.Validate if the designated constraints aren't met.
type InfoStocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoStocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoStocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoStocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoStocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoStocksRequestValidationError) ErrorName() string {
	return "InfoStocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InfoStocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoStocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoStocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoStocksRequestValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on InfoOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InfoOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoOrderResponseMultiError, or nil if none found.
func (m *InfoOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for User

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoOrderResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoOrderResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoOrderResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InfoOrderResponseMultiError(errors)
	}

	return nil
}

// InfoOrderResponseMultiError is an error wrapping multiple validation errors
// returned by InfoOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type InfoOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoOrderResponseMultiError) AllErrors() []error { return m }

// InfoOrderResponseValidationError is the validation error returned by
// InfoOrderResponse.Validate if the designated constraints aren't met.
type InfoOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoOrderResponseValidationError) ErrorName() string {
	return "InfoOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InfoOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoOrderResponseValidationError{}

// Validate checks the field values on PayOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PayOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PayOrderResponseMultiError, or nil if none found.
func (m *PayOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PayOrderResponseMultiError(errors)
	}

	return nil
}

// PayOrderResponseMultiError is an error wrapping multiple validation errors
// returned by PayOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type PayOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOrderResponseMultiError) AllErrors() []error { return m }

// PayOrderResponseValidationError is the validation error returned by
// PayOrderResponse.Validate if the designated constraints aren't met.
type PayOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOrderResponseValidationError) ErrorName() string { return "PayOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e PayOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOrderResponseValidationError{}

// Validate checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelOrderResponseMultiError, or nil if none found.
func (m *CancelOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CancelOrderResponseMultiError(errors)
	}

	return nil
}

// CancelOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CancelOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderResponseMultiError) AllErrors() []error { return m }

// CancelOrderResponseValidationError is the validation error returned by
// CancelOrderResponse.Validate if the designated constraints aren't met.
type CancelOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderResponseValidationError) ErrorName() string {
	return "CancelOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderResponseValidationError{}

// Validate checks the field values on InfoStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InfoStocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoStocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoStocksResponseMultiError, or nil if none found.
func (m *InfoStocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoStocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return InfoStocksResponseMultiError(errors)
	}

	return nil
}

// InfoStocksResponseMultiError is an error wrapping multiple validation errors
// returned by InfoStocksResponse.ValidateAll() if the designated constraints
// aren't met.
type InfoStocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoStocksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoStocksResponseMultiError) AllErrors() []error { return m }

// InfoStocksResponseValidationError is the validation error returned by
// InfoStocksResponse.Validate if the designated constraints aren't met.
type InfoStocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoStocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoStocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoStocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoStocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoStocksResponseValidationError) ErrorName() string {
	return "InfoStocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InfoStocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoStocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoStocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoStocksResponseValidationError{}
